/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20032', 'model/ErrorModel', 'model/InlineResponse2003', 'model/InlineResponse20033', 'model/ModelPackage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20032'), require('../model/ErrorModel'), require('../model/InlineResponse2003'), require('../model/InlineResponse20033'), require('../model/ModelPackage'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.PackageApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.InlineResponse20032, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse2003, root.ScubawhereApiDocumentation.InlineResponse20033, root.ScubawhereApiDocumentation.ModelPackage);
  }
}(this, function(ApiClient, InlineResponse20032, ErrorModel, InlineResponse2003, InlineResponse20033, ModelPackage) {
  'use strict';

  /**
   * Package service.
   * @module api/PackageApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PackageApi. 
   * @alias module:api/PackageApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPackage operation.
     * @callback module:api/PackageApi~createPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new package
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {Date} opts.availableFrom 
     * @param {Date} opts.availableUntil 
     * @param {Array.<Integer>} opts.tickets 
     * @param {Array.<Integer>} opts.courses 
     * @param {Array.<Integer>} opts.accommodations 
     * @param {Array.<Integer>} opts.addons 
     * @param {Array.<Integer>} opts.prices 
     * @param {module:api/PackageApi~createPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20032}
     */
    this.createPackage = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createPackage";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'description': opts['description'],
        'available_from': opts['availableFrom'],
        'available_until': opts['availableUntil'],
        'tickets': this.apiClient.buildCollectionParam(opts['tickets'], 'multi'),
        'courses': this.apiClient.buildCollectionParam(opts['courses'], 'multi'),
        'accommodations': this.apiClient.buildCollectionParam(opts['accommodations'], 'multi'),
        'addons': this.apiClient.buildCollectionParam(opts['addons'], 'multi'),
        'prices': this.apiClient.buildCollectionParam(opts['prices'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/package/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackage operation.
     * @callback module:api/PackageApi~deletePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a package by ID
     * @param {Integer} id 
     * @param {module:api/PackageApi~deletePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.deletePackage = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deletePackage";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/package/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editPackage operation.
     * @callback module:api/PackageApi~editPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a package by ID
     * @param {Integer} id 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {Date} opts.availableFrom 
     * @param {Date} opts.availableUntil 
     * @param {Array.<Integer>} opts.tickets 
     * @param {Array.<Integer>} opts.courses 
     * @param {Array.<Integer>} opts.accommodations 
     * @param {Array.<Integer>} opts.addons 
     * @param {Array.<Integer>} opts.prices 
     * @param {module:api/PackageApi~editPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20033}
     */
    this.editPackage = function(id, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling editPackage";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling editPackage";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'name': name,
        'description': opts['description'],
        'available_from': opts['availableFrom'],
        'available_until': opts['availableUntil'],
        'tickets': this.apiClient.buildCollectionParam(opts['tickets'], 'multi'),
        'courses': this.apiClient.buildCollectionParam(opts['courses'], 'multi'),
        'accommodations': this.apiClient.buildCollectionParam(opts['accommodations'], 'multi'),
        'addons': this.apiClient.buildCollectionParam(opts['addons'], 'multi'),
        'prices': this.apiClient.buildCollectionParam(opts['prices'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/package/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPackages operation.
     * @callback module:api/PackageApi~getAllPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelPackage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all packages including any deleted models
     * @param {module:api/PackageApi~getAllPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelPackage>}
     */
    this.getAllPackages = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ModelPackage];

      return this.apiClient.callApi(
        '/package/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWithTrashedPackages operation.
     * @callback module:api/PackageApi~getAllWithTrashedPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelPackage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all packages including any deleted models
     * @param {module:api/PackageApi~getAllWithTrashedPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelPackage>}
     */
    this.getAllWithTrashedPackages = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ModelPackage];

      return this.apiClient.callApi(
        '/package/all-with-trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackage operation.
     * @callback module:api/PackageApi~getPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a package by ID
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.id 
     * @param {module:api/PackageApi~getPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20032}
     */
    this.getPackage = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/package', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
