/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BasePrice', 'model/ErrorModel', 'model/InlineResponse2014', 'model/Ticket'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BasePrice'), require('../model/ErrorModel'), require('../model/InlineResponse2014'), require('../model/Ticket'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.TicketApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.BasePrice, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse2014, root.ScubawhereApiDocumentation.Ticket);
  }
}(this, function(ApiClient, BasePrice, ErrorModel, InlineResponse2014, Ticket) {
  'use strict';

  /**
   * Ticket service.
   * @module api/TicketApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TicketApi. 
   * @alias module:api/TicketApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addTicket operation.
     * @callback module:api/TicketApi~addTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new ticket
     * @param {String} name 
     * @param {Array.<Integer>} trips 
     * @param {module:model/BasePrice} prices 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {Date} opts.availableFrom 
     * @param {Date} opts.availableUntil 
     * @param {Boolean} opts.onlyPackaged 
     * @param {Array.<Integer>} opts.boats 
     * @param {Array.<Integer>} opts.boatrooms 
     * @param {module:api/TicketApi~addTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.addTicket = function(name, trips, prices, opts, callback) {
      opts = opts || {};
      var postBody = prices;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling addTicket";
      }

      // verify the required parameter 'trips' is set
      if (trips == undefined || trips == null) {
        throw "Missing the required parameter 'trips' when calling addTicket";
      }

      // verify the required parameter 'prices' is set
      if (prices == undefined || prices == null) {
        throw "Missing the required parameter 'prices' when calling addTicket";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'description': opts['description'],
        'available_from': opts['availableFrom'],
        'available_until': opts['availableUntil'],
        'only_packaged': opts['onlyPackaged'],
        'trips': this.apiClient.buildCollectionParam(trips, 'multi'),
        'boats': this.apiClient.buildCollectionParam(opts['boats'], 'multi'),
        'boatrooms': this.apiClient.buildCollectionParam(opts['boatrooms'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/ticket/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTicket operation.
     * @callback module:api/TicketApi~deleteTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a ticket
     * @param {String} name 
     * @param {module:api/TicketApi~deleteTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.deleteTicket = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteTicket";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/ticket/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editTicket operation.
     * @callback module:api/TicketApi~editTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing ticket
     * @param {Integer} id 
     * @param {String} name 
     * @param {Array.<Integer>} trips 
     * @param {module:model/BasePrice} prices 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {Date} opts.availableFrom 
     * @param {Date} opts.availableUntil 
     * @param {Boolean} opts.onlyPackaged 
     * @param {Array.<Integer>} opts.boats 
     * @param {Array.<Integer>} opts.boatrooms 
     * @param {module:api/TicketApi~editTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.editTicket = function(id, name, trips, prices, opts, callback) {
      opts = opts || {};
      var postBody = prices;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling editTicket";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling editTicket";
      }

      // verify the required parameter 'trips' is set
      if (trips == undefined || trips == null) {
        throw "Missing the required parameter 'trips' when calling editTicket";
      }

      // verify the required parameter 'prices' is set
      if (prices == undefined || prices == null) {
        throw "Missing the required parameter 'prices' when calling editTicket";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'name': name,
        'description': opts['description'],
        'available_from': opts['availableFrom'],
        'available_until': opts['availableUntil'],
        'only_packaged': opts['onlyPackaged'],
        'trips': this.apiClient.buildCollectionParam(trips, 'multi'),
        'boats': this.apiClient.buildCollectionParam(opts['boats'], 'multi'),
        'boatrooms': this.apiClient.buildCollectionParam(opts['boatrooms'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/ticket/edit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAvailableTickets operation.
     * @callback module:api/TicketApi~getAllAvailableTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all tickets that are available to booked today
     * @param {module:api/TicketApi~getAllAvailableTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.getAllAvailableTickets = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/ticket/only-available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTickets operation.
     * @callback module:api/TicketApi~getAllTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all tickets
     * @param {module:api/TicketApi~getAllTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.getAllTickets = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/ticket/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWithTrashedTickets operation.
     * @callback module:api/TicketApi~getAllWithTrashedTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all tickets
     * @param {module:api/TicketApi~getAllWithTrashedTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.getAllWithTrashedTickets = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/ticket/all-with-trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTicket operation.
     * @callback module:api/TicketApi~getTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a ticket by ID
     * @param {Integer} id 
     * @param {module:api/TicketApi~getTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.getTicket = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getTicket";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/ticket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
