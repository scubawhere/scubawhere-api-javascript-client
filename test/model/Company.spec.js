/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ScubawhereApiDocumentation);
  }
}(this, function(expect, ScubawhereApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ScubawhereApiDocumentation.Company();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Company', function() {
    it('should create an instance of Company', function() {
      // uncomment below and update the code to test Company
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be.a(ScubawhereApiDocumentation.Company);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property address1 (base name: "address_1")', function() {
      // uncomment below and update the code to test the property address1
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property address2 (base name: "address_2")', function() {
      // uncomment below and update the code to test the property address2
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property county (base name: "county")', function() {
      // uncomment below and update the code to test the property county
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property postcode (base name: "postcode")', function() {
      // uncomment below and update the code to test the property postcode
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property countryId (base name: "country_id")', function() {
      // uncomment below and update the code to test the property countryId
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property currencyId (base name: "currency_id")', function() {
      // uncomment below and update the code to test the property currencyId
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property businessEmail (base name: "business_email")', function() {
      // uncomment below and update the code to test the property businessEmail
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property businessPhone (base name: "business_phone")', function() {
      // uncomment below and update the code to test the property businessPhone
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property vatNumber (base name: "vat_number")', function() {
      // uncomment below and update the code to test the property vatNumber
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property registrationNumber (base name: "registration_number")', function() {
      // uncomment below and update the code to test the property registrationNumber
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property contact (base name: "contact")', function() {
      // uncomment below and update the code to test the property contact
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instane = new ScubawhereApiDocumentation.Company();
      //expect(instance).to.be();
    });

  });

}));
