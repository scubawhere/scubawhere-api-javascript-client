/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2011', 'model/ErrorModel', 'model/InlineResponse20035', 'model/Payment', 'model/InlineResponse20034', 'model/InlineResponse20036'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2011'), require('../model/ErrorModel'), require('../model/InlineResponse20035'), require('../model/Payment'), require('../model/InlineResponse20034'), require('../model/InlineResponse20036'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.PaymentApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.InlineResponse2011, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse20035, root.ScubawhereApiDocumentation.Payment, root.ScubawhereApiDocumentation.InlineResponse20034, root.ScubawhereApiDocumentation.InlineResponse20036);
  }
}(this, function(ApiClient, InlineResponse2011, ErrorModel, InlineResponse20035, Payment, InlineResponse20034, InlineResponse20036) {
  'use strict';

  /**
   * Payment service.
   * @module api/PaymentApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PaymentApi. 
   * @alias module:api/PaymentApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPayment operation.
     * @callback module:api/PaymentApi~addPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new payment
     * @param {Integer} bookingId 
     * @param {Integer} paymentgatewayId 
     * @param {Number} amount 
     * @param {module:api/PaymentApi~addPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2011}
     */
    this.addPayment = function(bookingId, paymentgatewayId, amount, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling addPayment";
      }

      // verify the required parameter 'paymentgatewayId' is set
      if (paymentgatewayId == undefined || paymentgatewayId == null) {
        throw "Missing the required parameter 'paymentgatewayId' when calling addPayment";
      }

      // verify the required parameter 'amount' is set
      if (amount == undefined || amount == null) {
        throw "Missing the required parameter 'amount' when calling addPayment";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'paymentgateway_id': paymentgatewayId,
        'amount': amount
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/payment/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filterPayments operation.
     * @callback module:api/PaymentApi~filterPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20035} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all payments that match a filter
     * @param {Object} opts Optional parameters
     * @param {Date} opts.after Date of the earliest payment
     * @param {Date} opts.before Date of the latest payment to be retrieved
     * @param {module:api/PaymentApi~filterPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20035}
     */
    this.filterPayments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20035;

      return this.apiClient.callApi(
        '/payment/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPayments operation.
     * @callback module:api/PaymentApi~getAllPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all payments made
     * @param {module:api/PaymentApi~getAllPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payment>}
     */
    this.getAllPayments = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Payment];

      return this.apiClient.callApi(
        '/payment/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/PaymentApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20034} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a payment by ID
     * @param {Integer} id 
     * @param {module:api/PaymentApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20034}
     */
    this.getPayment = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPayment";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20034;

      return this.apiClient.callApi(
        '/payment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentGateways operation.
     * @callback module:api/PaymentApi~getPaymentGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20036} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all the payment gateways
     * @param {module:api/PaymentApi~getPaymentGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20036}
     */
    this.getPaymentGateways = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20036;

      return this.apiClient.callApi(
        '/payment/paymentgateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
