/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/InlineResponse20027', 'model/InlineResponse2003', 'model/InlineResponse20028', 'model/Course'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/InlineResponse20027'), require('../model/InlineResponse2003'), require('../model/InlineResponse20028'), require('../model/Course'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.CourseApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse20027, root.ScubawhereApiDocumentation.InlineResponse2003, root.ScubawhereApiDocumentation.InlineResponse20028, root.ScubawhereApiDocumentation.Course);
  }
}(this, function(ApiClient, ErrorModel, InlineResponse20027, InlineResponse2003, InlineResponse20028, Course) {
  'use strict';

  /**
   * Course service.
   * @module api/CourseApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CourseApi. 
   * @alias module:api/CourseApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCourse operation.
     * @callback module:api/CourseApi~createCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new course
     * @param {String} name 
     * @param {String} description 
     * @param {Integer} capacity 
     * @param {Array.<Number>} prices 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.certificateId 
     * @param {Array.<Integer>} opts.tickets 
     * @param {Array.<Integer>} opts.trainings 
     * @param {module:api/CourseApi~createCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    this.createCourse = function(name, description, capacity, prices, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createCourse";
      }

      // verify the required parameter 'description' is set
      if (description == undefined || description == null) {
        throw "Missing the required parameter 'description' when calling createCourse";
      }

      // verify the required parameter 'capacity' is set
      if (capacity == undefined || capacity == null) {
        throw "Missing the required parameter 'capacity' when calling createCourse";
      }

      // verify the required parameter 'prices' is set
      if (prices == undefined || prices == null) {
        throw "Missing the required parameter 'prices' when calling createCourse";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'description': description,
        'capacity': capacity,
        'certificate_id': opts['certificateId'],
        'tickets': this.apiClient.buildCollectionParam(opts['tickets'], 'multi'),
        'trainings': this.apiClient.buildCollectionParam(opts['trainings'], 'multi'),
        'prices': this.apiClient.buildCollectionParam(prices, 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/course/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourse operation.
     * @callback module:api/CourseApi~deleteCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a course by ID
     * @param {Integer} id 
     * @param {module:api/CourseApi~deleteCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.deleteCourse = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteCourse";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/course/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editCourse operation.
     * @callback module:api/CourseApi~editCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a course by ID
     * @param {Integer} id 
     * @param {String} name 
     * @param {String} description 
     * @param {Integer} capacity 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.certificateId 
     * @param {Array.<Integer>} opts.tickets 
     * @param {Array.<Integer>} opts.trainings 
     * @param {module:api/CourseApi~editCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20028}
     */
    this.editCourse = function(id, name, description, capacity, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling editCourse";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling editCourse";
      }

      // verify the required parameter 'description' is set
      if (description == undefined || description == null) {
        throw "Missing the required parameter 'description' when calling editCourse";
      }

      // verify the required parameter 'capacity' is set
      if (capacity == undefined || capacity == null) {
        throw "Missing the required parameter 'capacity' when calling editCourse";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'name': name,
        'description': description,
        'capacity': capacity,
        'certificate_id': opts['certificateId'],
        'tickets': this.apiClient.buildCollectionParam(opts['tickets'], 'multi'),
        'trainings': this.apiClient.buildCollectionParam(opts['trainings'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/course/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCourses operation.
     * @callback module:api/CourseApi~getAllCoursesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Course>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all courses including any deleted models
     * @param {module:api/CourseApi~getAllCoursesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Course>}
     */
    this.getAllCourses = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Course];

      return this.apiClient.callApi(
        '/course/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWithTrashedCourses operation.
     * @callback module:api/CourseApi~getAllWithTrashedCoursesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Course>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all courses including any deleted models
     * @param {module:api/CourseApi~getAllWithTrashedCoursesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Course>}
     */
    this.getAllWithTrashedCourses = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Course];

      return this.apiClient.callApi(
        '/course/all-with-trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourse operation.
     * @callback module:api/CourseApi~getCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a course by ID
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.id 
     * @param {module:api/CourseApi~getCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    this.getCourse = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/course', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
