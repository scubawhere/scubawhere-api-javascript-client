/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/TrainingSession', 'model/InlineResponse20019', 'model/InlineResponse2003', 'model/InlineResponse20020', 'model/TrainingSessionManifest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/TrainingSession'), require('../model/InlineResponse20019'), require('../model/InlineResponse2003'), require('../model/InlineResponse20020'), require('../model/TrainingSessionManifest'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.ClasssessionApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.TrainingSession, root.ScubawhereApiDocumentation.InlineResponse20019, root.ScubawhereApiDocumentation.InlineResponse2003, root.ScubawhereApiDocumentation.InlineResponse20020, root.ScubawhereApiDocumentation.TrainingSessionManifest);
  }
}(this, function(ApiClient, ErrorModel, TrainingSession, InlineResponse20019, InlineResponse2003, InlineResponse20020, TrainingSessionManifest) {
  'use strict';

  /**
   * Classsession service.
   * @module api/ClasssessionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ClasssessionApi. 
   * @alias module:api/ClasssessionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the classSessionGet operation.
     * @callback module:api/ClasssessionApi~classSessionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a class session by ID
     * @param {Integer} id 
     * @param {module:api/ClasssessionApi~classSessionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingSession}
     */
    this.classSessionGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling classSessionGet";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrainingSession;

      return this.apiClient.callApi(
        '/class-session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClassSession operation.
     * @callback module:api/ClasssessionApi~createClassSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new class session
     * @param {Date} start 
     * @param {Integer} trainingId 
     * @param {module:api/ClasssessionApi~createClassSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    this.createClassSession = function(start, trainingId, callback) {
      var postBody = null;

      // verify the required parameter 'start' is set
      if (start == undefined || start == null) {
        throw "Missing the required parameter 'start' when calling createClassSession";
      }

      // verify the required parameter 'trainingId' is set
      if (trainingId == undefined || trainingId == null) {
        throw "Missing the required parameter 'trainingId' when calling createClassSession";
      }


      var pathParams = {
      };
      var queryParams = {
        'start': start,
        'training_id': trainingId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/class-session/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClasssession operation.
     * @callback module:api/ClasssessionApi~deleteClasssessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a class session by ID
     * @param {Integer} id 
     * @param {module:api/ClasssessionApi~deleteClasssessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.deleteClasssession = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteClasssession";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/class-session/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editClassSession operation.
     * @callback module:api/ClasssessionApi~editClassSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a class session by ID
     * @param {Integer} id 
     * @param {Date} start 
     * @param {module:api/ClasssessionApi~editClassSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    this.editClassSession = function(id, start, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling editClassSession";
      }

      // verify the required parameter 'start' is set
      if (start == undefined || start == null) {
        throw "Missing the required parameter 'start' when calling editClassSession";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'start': start
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/class-session/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filterClassSession operation.
     * @callback module:api/ClasssessionApi~filterClassSessionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrainingSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all class sessions that match a filter
     * @param {module:api/ClasssessionApi~filterClassSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrainingSession>}
     */
    this.filterClassSession = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrainingSession];

      return this.apiClient.callApi(
        '/class-session/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllClassSessions operation.
     * @callback module:api/ClasssessionApi~getAllClassSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrainingSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all class sessions including any deleted models
     * @param {module:api/ClasssessionApi~getAllClassSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrainingSession>}
     */
    this.getAllClassSessions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrainingSession];

      return this.apiClient.callApi(
        '/class-session/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWithTrashedClassSessions operation.
     * @callback module:api/ClasssessionApi~getAllWithTrashedClassSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrainingSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all class sessions including any deleted models
     * @param {module:api/ClasssessionApi~getAllWithTrashedClassSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrainingSession>}
     */
    this.getAllWithTrashedClassSessions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrainingSession];

      return this.apiClient.callApi(
        '/class-session/all-with-trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassSessionManifest operation.
     * @callback module:api/ClasssessionApi~getClassSessionManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingSessionManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the customer manifest for a class session
     * @param {Integer} id 
     * @param {module:api/ClasssessionApi~getClassSessionManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingSessionManifest}
     */
    this.getClassSessionManifest = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getClassSessionManifest";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrainingSessionManifest;

      return this.apiClient.callApi(
        '/class-session/manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTodaysClassSession operation.
     * @callback module:api/ClasssessionApi~getTodaysClassSessionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrainingSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all class sessions that start today
     * @param {module:api/ClasssessionApi~getTodaysClassSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrainingSession>}
     */
    this.getTodaysClassSession = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrainingSession];

      return this.apiClient.callApi(
        '/class-session/today', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTommorowsClassSession operation.
     * @callback module:api/ClasssessionApi~getTommorowsClassSessionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrainingSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all class sessions that start tommorow
     * @param {module:api/ClasssessionApi~getTommorowsClassSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrainingSession>}
     */
    this.getTommorowsClassSession = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrainingSession];

      return this.apiClient.callApi(
        '/class-session/tommorow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
