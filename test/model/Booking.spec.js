/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ScubawhereApiDocumentation);
  }
}(this, function(expect, ScubawhereApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ScubawhereApiDocumentation.Booking();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Booking', function() {
    it('should create an instance of Booking', function() {
      // uncomment below and update the code to test Booking
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be.a(ScubawhereApiDocumentation.Booking);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property leadCustomerId (base name: "lead_customer_id")', function() {
      // uncomment below and update the code to test the property leadCustomerId
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property agentId (base name: "agent_id")', function() {
      // uncomment below and update the code to test the property agentId
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property agentReference (base name: "agent_reference")', function() {
      // uncomment below and update the code to test the property agentReference
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property discount (base name: "discount")', function() {
      // uncomment below and update the code to test the property discount
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property reservedUntil (base name: "reserved_until")', function() {
      // uncomment below and update the code to test the property reservedUntil
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property cancellationFee (base name: "cancellation_fee")', function() {
      // uncomment below and update the code to test the property cancellationFee
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parent_id")', function() {
      // uncomment below and update the code to test the property parentId
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property decimalPrice (base name: "decimal_price")', function() {
      // uncomment below and update the code to test the property decimalPrice
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property realDecimalPrice (base name: "real_decimal_price")', function() {
      // uncomment below and update the code to test the property realDecimalPrice
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property arrivalDate (base name: "arrival_date")', function() {
      // uncomment below and update the code to test the property arrivalDate
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property createdAtLocal (base name: "created_at_local")', function() {
      // uncomment below and update the code to test the property createdAtLocal
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property leadCustomer (base name: "lead_customer")', function() {
      // uncomment below and update the code to test the property leadCustomer
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property payments (base name: "payments")', function() {
      // uncomment below and update the code to test the property payments
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

    it('should have the property refunds (base name: "refunds")', function() {
      // uncomment below and update the code to test the property refunds
      //var instane = new ScubawhereApiDocumentation.Booking();
      //expect(instance).to.be();
    });

  });

}));
