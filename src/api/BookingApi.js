/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20010', 'model/ErrorModel', 'model/InlineResponse2008', 'model/InlineResponse2009', 'model/InlineResponse20011', 'model/InlineResponse2003', 'model/InlineResponse20012', 'model/InlineResponse20017', 'model/InlineResponse20014', 'model/InlineResponse20013', 'model/Booking', 'model/InlineResponse2007', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse201', 'model/InlineResponse20018'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20010'), require('../model/ErrorModel'), require('../model/InlineResponse2008'), require('../model/InlineResponse2009'), require('../model/InlineResponse20011'), require('../model/InlineResponse2003'), require('../model/InlineResponse20012'), require('../model/InlineResponse20017'), require('../model/InlineResponse20014'), require('../model/InlineResponse20013'), require('../model/Booking'), require('../model/InlineResponse2007'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse201'), require('../model/InlineResponse20018'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.BookingApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.InlineResponse20010, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse2008, root.ScubawhereApiDocumentation.InlineResponse2009, root.ScubawhereApiDocumentation.InlineResponse20011, root.ScubawhereApiDocumentation.InlineResponse2003, root.ScubawhereApiDocumentation.InlineResponse20012, root.ScubawhereApiDocumentation.InlineResponse20017, root.ScubawhereApiDocumentation.InlineResponse20014, root.ScubawhereApiDocumentation.InlineResponse20013, root.ScubawhereApiDocumentation.Booking, root.ScubawhereApiDocumentation.InlineResponse2007, root.ScubawhereApiDocumentation.InlineResponse20015, root.ScubawhereApiDocumentation.InlineResponse20016, root.ScubawhereApiDocumentation.InlineResponse201, root.ScubawhereApiDocumentation.InlineResponse20018);
  }
}(this, function(ApiClient, InlineResponse20010, ErrorModel, InlineResponse2008, InlineResponse2009, InlineResponse20011, InlineResponse2003, InlineResponse20012, InlineResponse20017, InlineResponse20014, InlineResponse20013, Booking, InlineResponse2007, InlineResponse20015, InlineResponse20016, InlineResponse201, InlineResponse20018) {
  'use strict';

  /**
   * Booking service.
   * @module api/BookingApi
   * @version 1.0.0
   */

  /**
   * Constructs a new BookingApi. 
   * @alias module:api/BookingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addBookingDetail operation.
     * @callback module:api/BookingApi~addBookingDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a package / course / ticket with its session to the booking
     * @param {Integer} bookingId 
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.ticketId 
     * @param {Integer} opts.sessionId 
     * @param {Integer} opts.boatroomId 
     * @param {Integer} opts.trainingSessionId 
     * @param {Boolean} opts.temporary 
     * @param {Integer} opts.packageId 
     * @param {Integer} opts.packagefacadeId 
     * @param {Integer} opts.courseId 
     * @param {module:api/BookingApi~addBookingDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    this.addBookingDetail = function(bookingId, customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling addBookingDetail";
      }

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling addBookingDetail";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'customer_id': customerId,
        'ticket_id': opts['ticketId'],
        'session_id': opts['sessionId'],
        'boatroom_id': opts['boatroomId'],
        'training_session_id': opts['trainingSessionId'],
        'temporary': opts['temporary'],
        'package_id': opts['packageId'],
        'packagefacade_id': opts['packagefacadeId'],
        'course_id': opts['courseId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/booking/add-detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attachAccommodation operation.
     * @callback module:api/BookingApi~attachAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach an accommodation booking to a booking
     * @param {Integer} bookingId 
     * @param {Integer} accommodationId 
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @param {module:api/BookingApi~attachAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    this.attachAccommodation = function(bookingId, accommodationId, customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling attachAccommodation";
      }

      // verify the required parameter 'accommodationId' is set
      if (accommodationId == undefined || accommodationId == null) {
        throw "Missing the required parameter 'accommodationId' when calling attachAccommodation";
      }

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling attachAccommodation";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'accommodation_id': accommodationId,
        'customer_id': customerId,
        'start': opts['start'],
        'end': opts['end']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/booking/add-accommodation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attachAddon operation.
     * @callback module:api/BookingApi~attachAddonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach an addon to a trip of a booking
     * @param {Integer} bookingId 
     * @param {Integer} bookingdetailId 
     * @param {Integer} addonId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.quantity 
     * @param {Integer} opts.packagefacadeId 
     * @param {module:api/BookingApi~attachAddonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    this.attachAddon = function(bookingId, bookingdetailId, addonId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling attachAddon";
      }

      // verify the required parameter 'bookingdetailId' is set
      if (bookingdetailId == undefined || bookingdetailId == null) {
        throw "Missing the required parameter 'bookingdetailId' when calling attachAddon";
      }

      // verify the required parameter 'addonId' is set
      if (addonId == undefined || addonId == null) {
        throw "Missing the required parameter 'addonId' when calling attachAddon";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'bookingdetail_id': bookingdetailId,
        'addon_id': addonId,
        'quantity': opts['quantity'],
        'packagefacade_id': opts['packagefacadeId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/booking/add-addon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attachPickup operation.
     * @callback module:api/BookingApi~attachPickupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a pickup location for a booking
     * @param {Integer} bookingId 
     * @param {String} location 
     * @param {Date} _date 
     * @param {String} time 
     * @param {module:api/BookingApi~attachPickupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    this.attachPickup = function(bookingId, location, _date, time, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling attachPickup";
      }

      // verify the required parameter 'location' is set
      if (location == undefined || location == null) {
        throw "Missing the required parameter 'location' when calling attachPickup";
      }

      // verify the required parameter '_date' is set
      if (_date == undefined || _date == null) {
        throw "Missing the required parameter '_date' when calling attachPickup";
      }

      // verify the required parameter 'time' is set
      if (time == undefined || time == null) {
        throw "Missing the required parameter 'time' when calling attachPickup";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'location': location,
        'date': _date,
        'time': time
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/booking/add-pickup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelBooking operation.
     * @callback module:api/BookingApi~cancelBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a booking
     * @param {Integer} bookingId 
     * @param {module:api/BookingApi~cancelBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.cancelBooking = function(bookingId, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling cancelBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/booking/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmBooking operation.
     * @callback module:api/BookingApi~confirmBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm a booking and all of its sessions and notify the lead customer
     * @param {Integer} bookingId 
     * @param {module:api/BookingApi~confirmBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    this.confirmBooking = function(bookingId, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling confirmBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/booking/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBooking operation.
     * @callback module:api/BookingApi~deleteBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a booking by ID
     * @param {Integer} id 
     * @param {module:api/BookingApi~deleteBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.deleteBooking = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/booking/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dettachAccommodation operation.
     * @callback module:api/BookingApi~dettachAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dettach an accommodation booking to a booking
     * @param {Integer} bookingId 
     * @param {Integer} accommodationId 
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start 
     * @param {module:api/BookingApi~dettachAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    this.dettachAccommodation = function(bookingId, accommodationId, customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling dettachAccommodation";
      }

      // verify the required parameter 'accommodationId' is set
      if (accommodationId == undefined || accommodationId == null) {
        throw "Missing the required parameter 'accommodationId' when calling dettachAccommodation";
      }

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling dettachAccommodation";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'accommodation_id': accommodationId,
        'customer_id': customerId,
        'start': opts['start']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/booking/remove-accommodation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dettachAddon operation.
     * @callback module:api/BookingApi~dettachAddonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dettach an addon to a trip of a booking
     * @param {Integer} bookingId 
     * @param {Integer} bookingdetailId 
     * @param {Integer} addonId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.packagefacadeId 
     * @param {module:api/BookingApi~dettachAddonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    this.dettachAddon = function(bookingId, bookingdetailId, addonId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling dettachAddon";
      }

      // verify the required parameter 'bookingdetailId' is set
      if (bookingdetailId == undefined || bookingdetailId == null) {
        throw "Missing the required parameter 'bookingdetailId' when calling dettachAddon";
      }

      // verify the required parameter 'addonId' is set
      if (addonId == undefined || addonId == null) {
        throw "Missing the required parameter 'addonId' when calling dettachAddon";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'bookingdetail_id': bookingdetailId,
        'addon_id': addonId,
        'packagefacade_id': opts['packagefacadeId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/booking/remove-addon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dettachPickup operation.
     * @callback module:api/BookingApi~dettachPickupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dettach a pickup location for a booking
     * @param {Integer} bookingId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.id 
     * @param {module:api/BookingApi~dettachPickupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.dettachPickup = function(bookingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling dettachPickup";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'id': opts['id']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/booking/remove-pickup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editBookingInfo operation.
     * @callback module:api/BookingApi~editBookingInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the information related to a booking
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.bookingId 
     * @param {Number} opts.discount 
     * @param {String} opts.comment 
     * @param {module:api/BookingApi~editBookingInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    this.editBookingInfo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'booking_id': opts['bookingId'],
        'discount': opts['discount'],
        'comment': opts['comment']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/booking/edit-info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filterBookings operation.
     * @callback module:api/BookingApi~filterBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bookings matching a filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.reference 
     * @param {Date} opts._date 
     * @param {String} opts.lastname 
     * @param {module:api/BookingApi~filterBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.filterBookings = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'reference': opts['reference'],
        'date': opts['_date'],
        'lastname': opts['lastname']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/booking/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllBookings operation.
     * @callback module:api/BookingApi~getAllBookingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Booking>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all bookings
     * @param {module:api/BookingApi~getAllBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Booking>}
     */
    this.getAllBookings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Booking];

      return this.apiClient.callApi(
        '/booking/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWithTrashedBookings operation.
     * @callback module:api/BookingApi~getAllWithTrashedBookingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Booking>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all bookings including any deleted models
     * @param {module:api/BookingApi~getAllWithTrashedBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Booking>}
     */
    this.getAllWithTrashedBookings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Booking];

      return this.apiClient.callApi(
        '/booking/all-with-trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBooking operation.
     * @callback module:api/BookingApi~getBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a booking by ID
     * @param {Integer} id 
     * @param {module:api/BookingApi~getBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.getBooking = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/booking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerBookings operation.
     * @callback module:api/BookingApi~getCustomerBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bookings for a customer
     * @param {Integer} customerId 
     * @param {module:api/BookingApi~getCustomerBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.getCustomerBookings = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling getCustomerBookings";
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/booking/customer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/BookingApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all payments made for a booking
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.bookingId 
     * @param {module:api/BookingApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    this.getPayments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'booking_id': opts['bookingId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/booking/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRefunds operation.
     * @callback module:api/BookingApi~getRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all refunds for a booking
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.bookingId 
     * @param {module:api/BookingApi~getRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.getRefunds = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'booking_id': opts['bookingId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/booking/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTodaysBookings operation.
     * @callback module:api/BookingApi~getTodaysBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bookings made today
     * @param {module:api/BookingApi~getTodaysBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.getTodaysBookings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/booking/today', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTommorowsBookings operation.
     * @callback module:api/BookingApi~getTommorowsBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bookings made today
     * @param {module:api/BookingApi~getTommorowsBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.getTommorowsBookings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/booking/tommorow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initBooking operation.
     * @callback module:api/BookingApi~initBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new empty booking
     * @param {String} source 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.agentId 
     * @param {String} opts.agentReference 
     * @param {module:api/BookingApi~initBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    this.initBooking = function(source, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source == undefined || source == null) {
        throw "Missing the required parameter 'source' when calling initBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'source': source,
        'agent_id': opts['agentId'],
        'agent_reference': opts['agentReference']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/booking/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeBookingDetail operation.
     * @callback module:api/BookingApi~removeBookingDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a detail from a booking
     * @param {Integer} bookingId 
     * @param {Integer} bookingdetailId 
     * @param {module:api/BookingApi~removeBookingDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    this.removeBookingDetail = function(bookingId, bookingdetailId, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling removeBookingDetail";
      }

      // verify the required parameter 'bookingdetailId' is set
      if (bookingdetailId == undefined || bookingdetailId == null) {
        throw "Missing the required parameter 'bookingdetailId' when calling removeBookingDetail";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'bookingdetail_id': bookingdetailId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/booking/remove-detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resendConfirmation operation.
     * @callback module:api/BookingApi~resendConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend the confirmation email to the lead customer
     * @param {Integer} bookingId 
     * @param {module:api/BookingApi~resendConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.resendConfirmation = function(bookingId, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling resendConfirmation";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/booking/resend-confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reserveBooking operation.
     * @callback module:api/BookingApi~reserveBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reserve a booking and its sessions capcity until a set date
     * @param {Integer} bookingId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.reservedUntil 
     * @param {module:api/BookingApi~reserveBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    this.reserveBooking = function(bookingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling reserveBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'reserved_until': opts['reservedUntil']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/booking/reserve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveBooking operation.
     * @callback module:api/BookingApi~saveBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a booking as a quote and release all capacity of sessions
     * @param {Integer} bookingId 
     * @param {module:api/BookingApi~saveBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.saveBooking = function(bookingId, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling saveBooking";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/booking/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setLeadCustomer operation.
     * @callback module:api/BookingApi~setLeadCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the lead customer for a booking
     * @param {Integer} bookingId 
     * @param {Integer} customerId 
     * @param {module:api/BookingApi~setLeadCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.setLeadCustomer = function(bookingId, customerId, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling setLeadCustomer";
      }

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw "Missing the required parameter 'customerId' when calling setLeadCustomer";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'customer_id': customerId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/booking/set-lead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
