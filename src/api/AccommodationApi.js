/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/ErrorModel', 'model/InlineResponse2004', 'model/Accommodation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/ErrorModel'), require('../model/InlineResponse2004'), require('../model/Accommodation'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.AccommodationApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.InlineResponse200, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse2004, root.ScubawhereApiDocumentation.Accommodation);
  }
}(this, function(ApiClient, InlineResponse200, ErrorModel, InlineResponse2004, Accommodation) {
  'use strict';

  /**
   * Accommodation service.
   * @module api/AccommodationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AccommodationApi. 
   * @alias module:api/AccommodationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addAccommodation operation.
     * @callback module:api/AccommodationApi~addAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an accommodation
     * @param {String} name Name of the type of accommodation
     * @param {Integer} capacity Number of beds in the accommodation
     * @param {Integer} basePrices Price of the accommodation and the dates of when the price is applicable
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Description of the accommodation
     * @param {module:api/AccommodationApi~addAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.addAccommodation = function(name, capacity, basePrices, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling addAccommodation";
      }

      // verify the required parameter 'capacity' is set
      if (capacity == undefined || capacity == null) {
        throw "Missing the required parameter 'capacity' when calling addAccommodation";
      }

      // verify the required parameter 'basePrices' is set
      if (basePrices == undefined || basePrices == null) {
        throw "Missing the required parameter 'basePrices' when calling addAccommodation";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'description': opts['description'],
        'capacity': capacity,
        'base_prices': basePrices
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/accommodation/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccommodation operation.
     * @callback module:api/AccommodationApi~deleteAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an accommodation by ID
     * @param {Integer} body ID of the accommodation
     * @param {module:api/AccommodationApi~deleteAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.deleteAccommodation = function(body, callback) {
      var postBody = null;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteAccommodation";
      }


      var pathParams = {
      };
      var queryParams = {
        'body': body
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/accommodation/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editAgent operation.
     * @callback module:api/AccommodationApi~editAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new agent
     * @param {Integer} id 
     * @param {Integer} name 
     * @param {String} branchName 
     * @param {String} branchAddress 
     * @param {String} branchPhone 
     * @param {String} branchEmail 
     * @param {Number} commission 
     * @param {String} terms 
     * @param {Object} opts Optional parameters
     * @param {String} opts.website 
     * @param {String} opts.billingAddress 
     * @param {String} opts.billingPhone 
     * @param {String} opts.billingEmail 
     * @param {module:api/AccommodationApi~editAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.editAgent = function(id, name, branchName, branchAddress, branchPhone, branchEmail, commission, terms, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling editAgent";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling editAgent";
      }

      // verify the required parameter 'branchName' is set
      if (branchName == undefined || branchName == null) {
        throw "Missing the required parameter 'branchName' when calling editAgent";
      }

      // verify the required parameter 'branchAddress' is set
      if (branchAddress == undefined || branchAddress == null) {
        throw "Missing the required parameter 'branchAddress' when calling editAgent";
      }

      // verify the required parameter 'branchPhone' is set
      if (branchPhone == undefined || branchPhone == null) {
        throw "Missing the required parameter 'branchPhone' when calling editAgent";
      }

      // verify the required parameter 'branchEmail' is set
      if (branchEmail == undefined || branchEmail == null) {
        throw "Missing the required parameter 'branchEmail' when calling editAgent";
      }

      // verify the required parameter 'commission' is set
      if (commission == undefined || commission == null) {
        throw "Missing the required parameter 'commission' when calling editAgent";
      }

      // verify the required parameter 'terms' is set
      if (terms == undefined || terms == null) {
        throw "Missing the required parameter 'terms' when calling editAgent";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'name': name,
        'website': opts['website'],
        'branch_name': branchName,
        'branch_address': branchAddress,
        'branch_phone': branchPhone,
        'branch_email': branchEmail,
        'billing_address': opts['billingAddress'],
        'billing_phone': opts['billingPhone'],
        'billing_email': opts['billingEmail'],
        'commission': commission,
        'terms': terms
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/agent/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filterAccommodation operation.
     * @callback module:api/AccommodationApi~filterAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the accommodations matching a filter
     * Get all the accommodations and their bookings between certain dates and / or an accommodation id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.before The date for the upper boundary of the dates
     * @param {Date} opts.after The date for the lower boundary of the dates
     * @param {Integer} opts.accommodationId ID Accommodation to filter by
     * @param {module:api/AccommodationApi~filterAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.filterAccommodation = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'before': opts['before'],
        'after': opts['after'],
        'accommodation_id': opts['accommodationId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/accommodation/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findAccommodation operation.
     * @callback module:api/AccommodationApi~findAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an accommodation by ID
     * @param {Array.<Integer>} id ID of the accommodation to be retrieved
     * @param {module:api/AccommodationApi~findAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.findAccommodation = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findAccommodation";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/accommodation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccommodations operation.
     * @callback module:api/AccommodationApi~getAllAccommodationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Accommodation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all accommodation
     * @param {module:api/AccommodationApi~getAllAccommodationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Accommodation>}
     */
    this.getAllAccommodations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Accommodation];

      return this.apiClient.callApi(
        '/accommodations/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWithTrashedAccommodations operation.
     * @callback module:api/AccommodationApi~getAllWithTrashedAccommodationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Accommodation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all accommodation including any deleted models
     * @param {module:api/AccommodationApi~getAllWithTrashedAccommodationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Accommodation>}
     */
    this.getAllWithTrashedAccommodations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Accommodation];

      return this.apiClient.callApi(
        '/accommodations/all-with-trashed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccommodation operation.
     * @callback module:api/AccommodationApi~updateAccommodationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Accommodation
     * Updates the accommodation by id using the specified fields
     * @param {Integer} id ID of the Accommodation to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the Accommodation
     * @param {Integer} opts.capacity Number of rooms the accommodation holds
     * @param {module:api/AccommodationApi~updateAccommodationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.updateAccommodation = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateAccommodation";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'name': opts['name'],
        'capacity': opts['capacity']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/accommodation/edit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
