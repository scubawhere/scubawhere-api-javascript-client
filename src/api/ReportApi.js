/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20040', 'model/ErrorModel', 'model/InlineResponse20041', 'model/InlineResponse20042'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20040'), require('../model/ErrorModel'), require('../model/InlineResponse20041'), require('../model/InlineResponse20042'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.ReportApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.InlineResponse20040, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse20041, root.ScubawhereApiDocumentation.InlineResponse20042);
  }
}(this, function(ApiClient, InlineResponse20040, ErrorModel, InlineResponse20041, InlineResponse20042) {
  'use strict';

  /**
   * Report service.
   * @module api/ReportApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ReportApi. 
   * @alias module:api/ReportApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRevenueStreamReport operation.
     * @callback module:api/ReportApi~getRevenueStreamReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report containing the distribution of revenue made from all the tickets, packages, courses, addons, accommodations
     * @param {Date} after 
     * @param {Date} before 
     * @param {module:api/ReportApi~getRevenueStreamReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    this.getRevenueStreamReport = function(after, before, callback) {
      var postBody = null;

      // verify the required parameter 'after' is set
      if (after == undefined || after == null) {
        throw "Missing the required parameter 'after' when calling getRevenueStreamReport";
      }

      // verify the required parameter 'before' is set
      if (before == undefined || before == null) {
        throw "Missing the required parameter 'before' when calling getRevenueStreamReport";
      }


      var pathParams = {
      };
      var queryParams = {
        'after': after,
        'before': before
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/report/revenue-streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourcesReport operation.
     * @callback module:api/ReportApi~getSourcesReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20041} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report about the distribution of revenue between the diffrent source of bookings
     * @param {Date} after 
     * @param {Date} before 
     * @param {module:api/ReportApi~getSourcesReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20041}
     */
    this.getSourcesReport = function(after, before, callback) {
      var postBody = null;

      // verify the required parameter 'after' is set
      if (after == undefined || after == null) {
        throw "Missing the required parameter 'after' when calling getSourcesReport";
      }

      // verify the required parameter 'before' is set
      if (before == undefined || before == null) {
        throw "Missing the required parameter 'before' when calling getSourcesReport";
      }


      var pathParams = {
      };
      var queryParams = {
        'after': after,
        'before': before
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20041;

      return this.apiClient.callApi(
        '/report/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrainingUtilisationReport operation.
     * @callback module:api/ReportApi~getTrainingUtilisationReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20042} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report containing the utilisation of all classes between the specified dates
     * @param {Date} after 
     * @param {Date} before 
     * @param {module:api/ReportApi~getTrainingUtilisationReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20042}
     */
    this.getTrainingUtilisationReport = function(after, before, callback) {
      var postBody = null;

      // verify the required parameter 'after' is set
      if (after == undefined || after == null) {
        throw "Missing the required parameter 'after' when calling getTrainingUtilisationReport";
      }

      // verify the required parameter 'before' is set
      if (before == undefined || before == null) {
        throw "Missing the required parameter 'before' when calling getTrainingUtilisationReport";
      }


      var pathParams = {
      };
      var queryParams = {
        'after': after,
        'before': before
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/report/training-utilisation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUtilisationReport operation.
     * @callback module:api/ReportApi~getUtilisationReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20042} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report containing the utilisation of all trips between the specified dates
     * @param {Date} after 
     * @param {Date} before 
     * @param {module:api/ReportApi~getUtilisationReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20042}
     */
    this.getUtilisationReport = function(after, before, callback) {
      var postBody = null;

      // verify the required parameter 'after' is set
      if (after == undefined || after == null) {
        throw "Missing the required parameter 'after' when calling getUtilisationReport";
      }

      // verify the required parameter 'before' is set
      if (before == undefined || before == null) {
        throw "Missing the required parameter 'before' when calling getUtilisationReport";
      }


      var pathParams = {
      };
      var queryParams = {
        'after': after,
        'before': before
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/report/utilisation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
