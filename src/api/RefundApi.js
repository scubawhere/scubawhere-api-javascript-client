/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2012', 'model/ErrorModel', 'model/InlineResponse20039', 'model/InlineResponse20038', 'model/InlineResponse20037'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2012'), require('../model/ErrorModel'), require('../model/InlineResponse20039'), require('../model/InlineResponse20038'), require('../model/InlineResponse20037'));
  } else {
    // Browser globals (root is window)
    if (!root.ScubawhereApiDocumentation) {
      root.ScubawhereApiDocumentation = {};
    }
    root.ScubawhereApiDocumentation.RefundApi = factory(root.ScubawhereApiDocumentation.ApiClient, root.ScubawhereApiDocumentation.InlineResponse2012, root.ScubawhereApiDocumentation.ErrorModel, root.ScubawhereApiDocumentation.InlineResponse20039, root.ScubawhereApiDocumentation.InlineResponse20038, root.ScubawhereApiDocumentation.InlineResponse20037);
  }
}(this, function(ApiClient, InlineResponse2012, ErrorModel, InlineResponse20039, InlineResponse20038, InlineResponse20037) {
  'use strict';

  /**
   * Refund service.
   * @module api/RefundApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RefundApi. 
   * @alias module:api/RefundApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addRefund operation.
     * @callback module:api/RefundApi~addRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new refund
     * @param {Integer} bookingId 
     * @param {Integer} paymentgatewayId 
     * @param {Number} amount 
     * @param {module:api/RefundApi~addRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2012}
     */
    this.addRefund = function(bookingId, paymentgatewayId, amount, callback) {
      var postBody = null;

      // verify the required parameter 'bookingId' is set
      if (bookingId == undefined || bookingId == null) {
        throw "Missing the required parameter 'bookingId' when calling addRefund";
      }

      // verify the required parameter 'paymentgatewayId' is set
      if (paymentgatewayId == undefined || paymentgatewayId == null) {
        throw "Missing the required parameter 'paymentgatewayId' when calling addRefund";
      }

      // verify the required parameter 'amount' is set
      if (amount == undefined || amount == null) {
        throw "Missing the required parameter 'amount' when calling addRefund";
      }


      var pathParams = {
      };
      var queryParams = {
        'booking_id': bookingId,
        'paymentgateway_id': paymentgatewayId,
        'amount': amount
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/refund/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filterRefunds operation.
     * @callback module:api/RefundApi~filterRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20039} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all refunds that match a filter
     * @param {Object} opts Optional parameters
     * @param {Date} opts.after Date of the earliest payment
     * @param {Date} opts.before Date of the latest payment to be retrieved
     * @param {module:api/RefundApi~filterRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20039}
     */
    this.filterRefunds = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20039;

      return this.apiClient.callApi(
        '/refund/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRefunds operation.
     * @callback module:api/RefundApi~getAllRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20038} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all refunds made
     * @param {module:api/RefundApi~getAllRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20038}
     */
    this.getAllRefunds = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20038;

      return this.apiClient.callApi(
        '/refund/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRefund operation.
     * @callback module:api/RefundApi~getRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20037} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a refund by ID
     * @param {Integer} id 
     * @param {module:api/RefundApi~getRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20037}
     */
    this.getRefund = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getRefund";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20037;

      return this.apiClient.callApi(
        '/refund', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
